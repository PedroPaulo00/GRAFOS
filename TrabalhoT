// FOIA AMARELA
// BEECROWD 1907 - COLORAÇÃO DE CENÁRIOS DE JOGOS
// PEDRO PAULO DE LIMA E WILLIAN ALMEIDA

#include <iostream>
#include <vector>
#include <stack>

using namespace std;

int N, M; // Dimensões da imagem
vector<string> imagem; // Matriz representando a imagem
vector<vector<bool>> visitado; // Matriz de pixels visitados

// Direções para movimentação na matriz
int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, 1, -1};

// Função para verificar se uma posição (x,y) é válida
bool ehValido(int x, int y) {
    return x >= 0 && x < N && y >= 0 && y < M && imagem[x][y] == '.' && !visitado[x][y];
}

// Função DFS (busca em profundidade) iterativa
void busca(int startX, int startY) {
    stack<pair<int, int>> pilha;
    pilha.push({startX, startY});

    while (!pilha.empty()) {
        int x = pilha.top().first;
        int y = pilha.top().second;
        pilha.pop();

        if (ehValido(x, y)) {
            visitado[x][y] = true;
            
            for (int i = 0; i < 4; i++) {
                int novoX = x + dx[i];
                int novoY = y + dy[i];
                pilha.push({novoX, novoY});
            }
        }
    }
}

int main() {
    cin >> N >> M;
    imagem.resize(N);
    visitado.assign(N, vector<bool>(M, false));

    for (int i = 0; i < N; i++) {
        cin >> imagem[i];
    }

    int numCliques = 0;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            // Se encontrarmos um pixel não visitado, aplicamos a busca em profundidade
            if (imagem[i][j] == '.' && !visitado[i][j]) {
                busca(i, j);
                numCliques++;
            }
        }
    }

    cout << numCliques << endl; // Exibir o número de cliques necessários

    return 0;
}
